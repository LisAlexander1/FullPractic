// <auto-generated />
using System;
using BackPractice.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BackPractice.Models
{
    [DbContext(typeof(LibraryDbContext))]
    [Migration("20231226054406_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BackPractice.Models.Author", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("last_name");

                    b.Property<string>("Surname")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("surname");

                    b.HasKey("Id")
                        .HasName("PK__Authors__3213E83F12B95C4F");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("BackPractice.Models.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid?>("AuthorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("author_id");

                    b.Property<byte[]>("Cover")
                        .HasMaxLength(1)
                        .HasColumnType("varbinary(1)")
                        .HasColumnName("cover");

                    b.Property<string>("Name")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("name");

                    b.Property<int?>("NumberOfPages")
                        .HasColumnType("int")
                        .HasColumnName("number_of_pages");

                    b.Property<DateTime?>("PublishedAt")
                        .HasColumnType("date")
                        .HasColumnName("published_at");

                    b.Property<Guid?>("PublisherId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("publisher_id");

                    b.HasKey("Id")
                        .HasName("PK__Book__3213E83F70E5FFD1");

                    b.HasIndex("AuthorId");

                    b.HasIndex("PublisherId");

                    b.ToTable("Book");
                });

            modelBuilder.Entity("BackPractice.Models.BookCopy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid?>("BookId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("book_id");

                    b.Property<int?>("Rack")
                        .HasColumnType("int")
                        .HasColumnName("rack");

                    b.Property<int?>("Shelf")
                        .HasColumnType("int")
                        .HasColumnName("shelf");

                    b.HasKey("Id")
                        .HasName("PK__BookCopy__3213E83F0729BC03");

                    b.HasIndex("BookId");

                    b.ToTable("BookCopy");
                });

            modelBuilder.Entity("BackPractice.Models.BorrowedBook", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("BookCopyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("book_copy_id");

                    b.Property<Guid>("ReaderId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("reader_id");

                    b.Property<DateTime>("ReturnTo")
                        .HasColumnType("date")
                        .HasColumnName("return_to");

                    b.Property<DateTime?>("ReturnedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("returned_at");

                    b.Property<DateTime>("TakenAt")
                        .HasColumnType("datetime")
                        .HasColumnName("taken_at");

                    b.HasKey("Id")
                        .HasName("PK__Borrowed__3213E83F61C76F76");

                    b.HasIndex("ReaderId");

                    b.HasIndex(new[] { "BookCopyId", "ReaderId", "TakenAt" }, "BorrowedBooks_index_0")
                        .IsUnique();

                    b.ToTable("BorrowedBooks");
                });

            modelBuilder.Entity("BackPractice.Models.Publisher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("address");

                    b.Property<string>("Name")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PK__Publishe__3213E83FDEAAC3ED");

                    b.ToTable("Publisher");
                });

            modelBuilder.Entity("BackPractice.Models.Reader", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("date")
                        .HasColumnName("birthday");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("last_name");

                    b.Property<string>("Pass")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("pass");

                    b.Property<byte[]>("Photo")
                        .HasMaxLength(1)
                        .HasColumnType("varbinary(1)")
                        .HasColumnName("photo");

                    b.Property<string>("Surname")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("surname");

                    b.HasKey("Id")
                        .HasName("PK__Readers__3213E83FFF35FA6E");

                    b.HasIndex(new[] { "Pass" }, "UQ__Readers__8320F63E51E674C8")
                        .IsUnique()
                        .HasFilter("[pass] IS NOT NULL");

                    b.ToTable("Readers");
                });

            modelBuilder.Entity("BackPractice.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Login")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("login");

                    b.Property<string>("Password")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("password");

                    b.HasKey("Id")
                        .HasName("PK__Users__3213E83F741D32A3");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BackPractice.Models.Book", b =>
                {
                    b.HasOne("BackPractice.Models.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .HasConstraintName("FK__Book__author_id__47DBAE45");

                    b.HasOne("BackPractice.Models.Publisher", "Publisher")
                        .WithMany("Books")
                        .HasForeignKey("PublisherId")
                        .HasConstraintName("FK__Book__publisher___46E78A0C");

                    b.Navigation("Author");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("BackPractice.Models.BookCopy", b =>
                {
                    b.HasOne("BackPractice.Models.Book", "Book")
                        .WithMany("BookCopies")
                        .HasForeignKey("BookId")
                        .HasConstraintName("FK__BookCopy__book_i__440B1D61");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("BackPractice.Models.BorrowedBook", b =>
                {
                    b.HasOne("BackPractice.Models.BookCopy", "BookCopy")
                        .WithMany("BorrowedBooks")
                        .HasForeignKey("BookCopyId")
                        .IsRequired()
                        .HasConstraintName("FK__BorrowedB__book___44FF419A");

                    b.HasOne("BackPractice.Models.Reader", "Reader")
                        .WithMany("BorrowedBooks")
                        .HasForeignKey("ReaderId")
                        .IsRequired()
                        .HasConstraintName("FK__BorrowedB__reade__45F365D3");

                    b.Navigation("BookCopy");

                    b.Navigation("Reader");
                });

            modelBuilder.Entity("BackPractice.Models.Author", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("BackPractice.Models.Book", b =>
                {
                    b.Navigation("BookCopies");
                });

            modelBuilder.Entity("BackPractice.Models.BookCopy", b =>
                {
                    b.Navigation("BorrowedBooks");
                });

            modelBuilder.Entity("BackPractice.Models.Publisher", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("BackPractice.Models.Reader", b =>
                {
                    b.Navigation("BorrowedBooks");
                });
#pragma warning restore 612, 618
        }
    }
}
